{
	"info": {
		"_postman_id": "0b3aba82-1195-4ed8-8dbe-dcdf37b3f7d8",
		"name": "EWM Evaluations",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24445156"
	},
	"item": [
		{
			"name": "Data preparation",
			"item": [
				{
					"name": "Добавить 1-го пользователя",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function() {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ должен содержать поля: id, name, email, rating\", function () {\r",
									"    const target = pm.response.json();\r",
									"    pm.expect(target).to.have.property('id');\r",
									"    pm.expect(target).to.have.property('name');\r",
									"    pm.expect(target).to.have.property('email');\r",
									"    pm.expect(target).to.have.property('rating');\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'id' должно иметь значение 1\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'rating' должно иметь значение 0\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('rating');\r",
									"    pm.expect(jsonData.rating, '\"rating\" must be 0').to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"John\",\r\n  \"email\": \"john_doe@yandex.ru\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавить 2-го пользователя",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function() {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ должен содержать поля: id, name, email, rating\", function () {\r",
									"    const target = pm.response.json();\r",
									"    pm.expect(target).to.have.property('id');\r",
									"    pm.expect(target).to.have.property('name');\r",
									"    pm.expect(target).to.have.property('email');\r",
									"    pm.expect(target).to.have.property('rating');\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'id' должно иметь значение 2\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'rating' должно иметь значение 0\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('rating');\r",
									"    pm.expect(jsonData.rating, '\"rating\" must be 0').to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Jane\",\r\n  \"email\": \"jane_doe@yandex.ru\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавить 3-го пользователя",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function() {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ должен содержать поля: id, name, email, rating\", function () {\r",
									"    const target = pm.response.json();\r",
									"    pm.expect(target).to.have.property('id');\r",
									"    pm.expect(target).to.have.property('name');\r",
									"    pm.expect(target).to.have.property('email');\r",
									"    pm.expect(target).to.have.property('rating');\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'id' должно иметь значение 3\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 3').to.eql(3);\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'rating' должно иметь значение 0\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('rating');\r",
									"    pm.expect(jsonData.rating, '\"rating\" must be 0').to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Stranger\",\r\n  \"email\": \"stranger@yandex.ru\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавить новую категорию событий",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function() {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Events\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/categories",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавить 1-е событие пользователем id=1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function() {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ должен содержать поле: rating\", function () {\r",
									"    const target = pm.response.json();\r",
									"    pm.expect(target).to.have.property('rating');\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'rating' должно иметь значение 0\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('rating');\r",
									"    pm.expect(jsonData.rating, '\"rating\" must be 0').to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Event №1\",\r\n    \"annotation\": \"Events №1 some annotation\",\r\n    \"category\": 1,\r\n    \"description\": \"Events №1 some description\",\r\n    \"eventDate\": \"2023-07-18 18:58:17\",\r\n    \"location\": {\r\n        \"lat\": 1,\r\n        \"lon\": 1\r\n    },\r\n    \"requestModeration\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/:userId/events",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"events"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавить 2-е событие пользователем id=2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function() {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ должен содержать поле: rating\", function () {\r",
									"    const target = pm.response.json();\r",
									"    pm.expect(target).to.have.property('rating');\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'rating' должно иметь значение 0\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('rating');\r",
									"    pm.expect(jsonData.rating, '\"rating\" must be 0').to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Event №2\",\r\n    \"annotation\": \"Events №2 some annotation\",\r\n    \"category\": 1,\r\n    \"description\": \"Events №2 some description\",\r\n    \"eventDate\": \"2023-08-18 18:58:17\",\r\n    \"location\": {\r\n        \"lat\": 1,\r\n        \"lon\": 1\r\n    },\r\n    \"requestModeration\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/:userId/events",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"events"
							],
							"variable": [
								{
									"key": "userId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавить 3-е событие пользователем id=2 (с модерацией участия)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function() {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ должен содержать поле: rating\", function () {\r",
									"    const target = pm.response.json();\r",
									"    pm.expect(target).to.have.property('rating');\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'rating' должно иметь значение 0\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('rating');\r",
									"    pm.expect(jsonData.rating, '\"rating\" must be 0').to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Event №3\",\r\n    \"annotation\": \"Events №3 some annotation\",\r\n    \"category\": 1,\r\n    \"description\": \"Events №3 some description\",\r\n    \"eventDate\": \"2023-07-18 18:58:17\",\r\n    \"location\": {\r\n        \"lat\": 1,\r\n        \"lon\": 1\r\n    },\r\n    \"participantLimit\": 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/:userId/events",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"events"
							],
							"variable": [
								{
									"key": "userId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Опубликовать 1-е событие",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ должен содержать поле: state\", function () {\r",
									"    const target = pm.response.json();\r",
									"    pm.expect(target).to.have.property('state');\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'state' должно иметь значение 'PUBLISHED'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('state');\r",
									"    pm.expect(jsonData.state, '\"state\" must be \"PUBLISHED\"').to.eql('PUBLISHED');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"stateAction\": \"PUBLISH_EVENT\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/events/:eventId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"events",
								":eventId"
							],
							"variable": [
								{
									"key": "eventId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Опубликовать 2-е событие",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ должен содержать поле: state\", function () {\r",
									"    const target = pm.response.json();\r",
									"    pm.expect(target).to.have.property('state');\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'state' должно иметь значение 'PUBLISHED'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('state');\r",
									"    pm.expect(jsonData.state, '\"state\" must be \"PUBLISHED\"').to.eql('PUBLISHED');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"stateAction\": \"PUBLISH_EVENT\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/events/:eventId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"events",
								":eventId"
							],
							"variable": [
								{
									"key": "eventId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Опубликовать 3-е событие",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ должен содержать поле: state\", function () {\r",
									"    const target = pm.response.json();\r",
									"    pm.expect(target).to.have.property('state');\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'state' должно иметь значение 'PUBLISHED'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('state');\r",
									"    pm.expect(jsonData.state, '\"state\" must be \"PUBLISHED\"').to.eql('PUBLISHED');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"stateAction\": \"PUBLISH_EVENT\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/events/:eventId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"events",
								":eventId"
							],
							"variable": [
								{
									"key": "eventId",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Одобренный запрос на участие в 1-м событии пользователем id=2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function() {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ должен содержать поле: status\", function () {\r",
									"    const target = pm.response.json();\r",
									"    pm.expect(target).to.have.property('status');\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'status' должно иметь значение 'CONFIRMED'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('status');\r",
									"    pm.expect(jsonData.status, '\"status\" must be \"CONFIRMED\"').to.eql('CONFIRMED');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/:userId/requests?eventId=1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"requests"
							],
							"query": [
								{
									"key": "eventId",
									"value": "1"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Одобренный запрос на участие в 1-м событии пользователем id=3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function() {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ должен содержать поле: status\", function () {\r",
									"    const target = pm.response.json();\r",
									"    pm.expect(target).to.have.property('status');\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'status' должно иметь значение 'CONFIRMED'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('status');\r",
									"    pm.expect(jsonData.status, '\"status\" must be \"CONFIRMED\"').to.eql('CONFIRMED');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/:userId/requests?eventId=1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"requests"
							],
							"query": [
								{
									"key": "eventId",
									"value": "1"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Одобренный запрос на участие во 2-м событии пользователем id=1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function() {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ должен содержать поле: status\", function () {\r",
									"    const target = pm.response.json();\r",
									"    pm.expect(target).to.have.property('status');\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'status' должно иметь значение 'CONFIRMED'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('status');\r",
									"    pm.expect(jsonData.status, '\"status\" must be \"CONFIRMED\"').to.eql('CONFIRMED');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/:userId/requests?eventId=2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"requests"
							],
							"query": [
								{
									"key": "eventId",
									"value": "2"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Одобренный запрос на участие во 2-м событии пользователем id=3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function() {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ должен содержать поле: status\", function () {\r",
									"    const target = pm.response.json();\r",
									"    pm.expect(target).to.have.property('status');\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'status' должно иметь значение 'CONFIRMED'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('status');\r",
									"    pm.expect(jsonData.status, '\"status\" must be \"CONFIRMED\"').to.eql('CONFIRMED');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/:userId/requests?eventId=2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"requests"
							],
							"query": [
								{
									"key": "eventId",
									"value": "2"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Ожидающий запрос на участие в 3-м событии пользователем id=3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function() {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ должен содержать поле: status\", function () {\r",
									"    const target = pm.response.json();\r",
									"    pm.expect(target).to.have.property('status');\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'status' должно иметь значение 'PENDING'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('status');\r",
									"    pm.expect(jsonData.status, '\"status\" must be \"PENDING\"').to.eql('PENDING');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/:userId/requests?eventId=3",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"requests"
							],
							"query": [
								{
									"key": "eventId",
									"value": "3"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "3"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Evaluation tests",
			"item": [
				{
					"name": "Получить пользователей с 0 рейтингом",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Количество пользователей должно быть 3\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be empty').to.eql(3);\r",
									"});\r",
									"\r",
									"pm.test(\"Пользователи должны содержать поля: id, name, email, rating\", function () {\r",
									"    pm.expect(target[target.length-3]).to.have.property('id');\r",
									"    pm.expect(target[target.length-3]).to.have.property('name');\r",
									"    pm.expect(target[target.length-3]).to.have.property('email');\r",
									"    pm.expect(target[target.length-3]).to.have.property('rating');\r",
									"\r",
									"    pm.expect(target[target.length-2]).to.have.property('id');\r",
									"    pm.expect(target[target.length-2]).to.have.property('name');\r",
									"    pm.expect(target[target.length-2]).to.have.property('email');\r",
									"    pm.expect(target[target.length-2]).to.have.property('rating');\r",
									"\r",
									"    pm.expect(target[target.length-1]).to.have.property('id');\r",
									"    pm.expect(target[target.length-1]).to.have.property('name');\r",
									"    pm.expect(target[target.length-1]).to.have.property('email');\r",
									"    pm.expect(target[target.length-1]).to.have.property('rating');\r",
									"});\r",
									"\r",
									"pm.test(\"Рейтинг пользователей должен быть равен 0\", function () {\r",
									"    pm.expect(target[target.length-3].rating).to.equal(0);\r",
									"    pm.expect(target[target.length-2].rating).to.equal(0);\r",
									"    pm.expect(target[target.length-1].rating).to.equal(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получить события с 0 рейтингом",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Количество событий должно быть 3\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be empty').to.eql(3);\r",
									"});\r",
									"\r",
									"pm.test(\"События должны содержать поле: rating\", function () {\r",
									"    pm.expect(target[target.length-3]).to.have.property('rating');\r",
									"    pm.expect(target[target.length-2]).to.have.property('rating');\r",
									"    pm.expect(target[target.length-1]).to.have.property('rating');\r",
									"});\r",
									"\r",
									"pm.test(\"Рейтинг событий должен быть равен 0\", function () {\r",
									"    pm.expect(target[target.length-3].rating).to.equal(0);\r",
									"    pm.expect(target[target.length-2].rating).to.equal(0);\r",
									"    pm.expect(target[target.length-1].rating).to.equal(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/events?categories=1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"events"
							],
							"query": [
								{
									"key": "categories",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Попытаться поставить лайк событию инициатором",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/:userId/events/:eventId/evaluation?isLike=true",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"evaluation"
							],
							"query": [
								{
									"key": "isLike",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								},
								{
									"key": "eventId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Попытаться поставить лайк без одобрения участия в событии",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/:userId/events/:eventId/evaluation?isLike=true",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"evaluation"
							],
							"query": [
								{
									"key": "isLike",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "3"
								},
								{
									"key": "eventId",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Поставить лайк 1-му событию пользователем id=2 (без параметра запроса)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function() {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ должен содержать поля: userName, eventTitle, evaluation\", function () {\r",
									"    const target = pm.response.json();\r",
									"    pm.expect(target).to.have.property('userName');\r",
									"    pm.expect(target).to.have.property('eventTitle');\r",
									"    pm.expect(target).to.have.property('evaluation');\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'userName' должно иметь значение 'Jane'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('userName');\r",
									"    pm.expect(jsonData.userName, '\"userName\" must be \"Jane\"').to.eql('Jane');\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'eventTitle' должно иметь значение 'Event №1'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('eventTitle');\r",
									"    pm.expect(jsonData.eventTitle, '\"eventTitle\" must be \"Event №1\"').to.eql('Event №1');\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'evaluation' должно иметь значение 'LIKE'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('evaluation');\r",
									"    pm.expect(jsonData.evaluation, '\"evaluation\" must be \"LIKE\"').to.eql('LIKE');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/:userId/events/:eventId/evaluation",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"evaluation"
							],
							"variable": [
								{
									"key": "userId",
									"value": "2"
								},
								{
									"key": "eventId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Попытаться повторно поставить лайк",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/:userId/events/:eventId/evaluation",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"evaluation"
							],
							"variable": [
								{
									"key": "userId",
									"value": "2"
								},
								{
									"key": "eventId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Поставить лайк 1-му событию пользователем id=3 (с параметром запроса)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function() {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ должен содержать поля: userName, eventTitle, evaluation\", function () {\r",
									"    const target = pm.response.json();\r",
									"    pm.expect(target).to.have.property('userName');\r",
									"    pm.expect(target).to.have.property('eventTitle');\r",
									"    pm.expect(target).to.have.property('evaluation');\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'userName' должно иметь значение 'Stranger'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('userName');\r",
									"    pm.expect(jsonData.userName, '\"userName\" must be \"Stranger\"').to.eql('Stranger');\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'eventTitle' должно иметь значение 'Event №1'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('eventTitle');\r",
									"    pm.expect(jsonData.eventTitle, '\"eventTitle\" must be \"Event №1\"').to.eql('Event №1');\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'evaluation' должно иметь значение 'LIKE'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('evaluation');\r",
									"    pm.expect(jsonData.evaluation, '\"evaluation\" must be \"LIKE\"').to.eql('LIKE');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/:userId/events/:eventId/evaluation?isLike=true",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"evaluation"
							],
							"query": [
								{
									"key": "isLike",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "3"
								},
								{
									"key": "eventId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Поставить дизлайк 2-му событию пользователем id=1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function() {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ должен содержать поля: userName, eventTitle, evaluation\", function () {\r",
									"    const target = pm.response.json();\r",
									"    pm.expect(target).to.have.property('userName');\r",
									"    pm.expect(target).to.have.property('eventTitle');\r",
									"    pm.expect(target).to.have.property('evaluation');\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'userName' должно иметь значение 'John'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('userName');\r",
									"    pm.expect(jsonData.userName, '\"userName\" must be \"John\"').to.eql('John');\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'eventTitle' должно иметь значение 'Event №2'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('eventTitle');\r",
									"    pm.expect(jsonData.eventTitle, '\"eventTitle\" must be \"Event №2\"').to.eql('Event №2');\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'evaluation' должно иметь значение 'LIKE'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('evaluation');\r",
									"    pm.expect(jsonData.evaluation, '\"evaluation\" must be \"DISLIKE\"').to.eql('DISLIKE');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/:userId/events/:eventId/evaluation?isLike=false",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"evaluation"
							],
							"query": [
								{
									"key": "isLike",
									"value": "false"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								},
								{
									"key": "eventId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Поставить дизлайк 2-му событию пользователем id=3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function() {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ должен содержать поля: userName, eventTitle, evaluation\", function () {\r",
									"    const target = pm.response.json();\r",
									"    pm.expect(target).to.have.property('userName');\r",
									"    pm.expect(target).to.have.property('eventTitle');\r",
									"    pm.expect(target).to.have.property('evaluation');\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'userName' должно иметь значение 'Stranger'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('userName');\r",
									"    pm.expect(jsonData.userName, '\"userName\" must be \"Stranger\"').to.eql('Stranger');\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'eventTitle' должно иметь значение 'Event №2'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('eventTitle');\r",
									"    pm.expect(jsonData.eventTitle, '\"eventTitle\" must be \"Event №2\"').to.eql('Event №2');\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'evaluation' должно иметь значение 'DISLIKE'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('evaluation');\r",
									"    pm.expect(jsonData.evaluation, '\"evaluation\" must be \"DISLIKE\"').to.eql('DISLIKE');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/:userId/events/:eventId/evaluation?isLike=false",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"evaluation"
							],
							"query": [
								{
									"key": "isLike",
									"value": "false"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "3"
								},
								{
									"key": "eventId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получить неотсортированных пользователей с рейтингом",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Количество пользователей должно быть 3\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be empty').to.eql(3);\r",
									"});\r",
									"\r",
									"pm.test(\"Пользователи должны содержать поля: id, name, email, rating\", function () {\r",
									"    pm.expect(target[target.length-3]).to.have.property('id');\r",
									"    pm.expect(target[target.length-3]).to.have.property('name');\r",
									"    pm.expect(target[target.length-3]).to.have.property('email');\r",
									"    pm.expect(target[target.length-3]).to.have.property('rating');\r",
									"\r",
									"    pm.expect(target[target.length-2]).to.have.property('id');\r",
									"    pm.expect(target[target.length-2]).to.have.property('name');\r",
									"    pm.expect(target[target.length-2]).to.have.property('email');\r",
									"    pm.expect(target[target.length-2]).to.have.property('rating');\r",
									"\r",
									"    pm.expect(target[target.length-1]).to.have.property('id');\r",
									"    pm.expect(target[target.length-1]).to.have.property('name');\r",
									"    pm.expect(target[target.length-1]).to.have.property('email');\r",
									"    pm.expect(target[target.length-1]).to.have.property('rating');\r",
									"});\r",
									"\r",
									"pm.test(\"Рейтинг пользователей должен учитывать оценки\", function () {\r",
									"    pm.expect(target[target.length-3].rating).to.equal(2);\r",
									"    pm.expect(target[target.length-2].rating).to.equal(-2);\r",
									"    pm.expect(target[target.length-1].rating).to.equal(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получить пользователей по убыванию рейтинга",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Количество пользователей должно быть 3\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be empty').to.eql(3);\r",
									"});\r",
									"\r",
									"pm.test(\"Пользователи должны содержать поля: id, name, email, rating\", function () {\r",
									"    pm.expect(target[target.length-3]).to.have.property('id');\r",
									"    pm.expect(target[target.length-3]).to.have.property('name');\r",
									"    pm.expect(target[target.length-3]).to.have.property('email');\r",
									"    pm.expect(target[target.length-3]).to.have.property('rating');\r",
									"\r",
									"    pm.expect(target[target.length-2]).to.have.property('id');\r",
									"    pm.expect(target[target.length-2]).to.have.property('name');\r",
									"    pm.expect(target[target.length-2]).to.have.property('email');\r",
									"    pm.expect(target[target.length-2]).to.have.property('rating');\r",
									"\r",
									"    pm.expect(target[target.length-1]).to.have.property('id');\r",
									"    pm.expect(target[target.length-1]).to.have.property('name');\r",
									"    pm.expect(target[target.length-1]).to.have.property('email');\r",
									"    pm.expect(target[target.length-1]).to.have.property('rating');\r",
									"});\r",
									"\r",
									"pm.test(\"Рейтинг пользователей должен учитывать оценки\", function () {\r",
									"    pm.expect(target[target.length-3].rating).to.equal(2);\r",
									"    pm.expect(target[target.length-2].rating).to.equal(0);\r",
									"    pm.expect(target[target.length-1].rating).to.equal(-2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/users?asc=true",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"users"
							],
							"query": [
								{
									"key": "asc",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получить пользователей по возрастанию рейтинга",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Количество пользователей должно быть 3\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be empty').to.eql(3);\r",
									"});\r",
									"\r",
									"pm.test(\"Пользователи должны содержать поля: id, name, email, rating\", function () {\r",
									"    pm.expect(target[target.length-3]).to.have.property('id');\r",
									"    pm.expect(target[target.length-3]).to.have.property('name');\r",
									"    pm.expect(target[target.length-3]).to.have.property('email');\r",
									"    pm.expect(target[target.length-3]).to.have.property('rating');\r",
									"\r",
									"    pm.expect(target[target.length-2]).to.have.property('id');\r",
									"    pm.expect(target[target.length-2]).to.have.property('name');\r",
									"    pm.expect(target[target.length-2]).to.have.property('email');\r",
									"    pm.expect(target[target.length-2]).to.have.property('rating');\r",
									"\r",
									"    pm.expect(target[target.length-1]).to.have.property('id');\r",
									"    pm.expect(target[target.length-1]).to.have.property('name');\r",
									"    pm.expect(target[target.length-1]).to.have.property('email');\r",
									"    pm.expect(target[target.length-1]).to.have.property('rating');\r",
									"});\r",
									"\r",
									"pm.test(\"Рейтинг пользователей должен учитывать оценки\", function () {\r",
									"    pm.expect(target[target.length-3].rating).to.equal(-2);\r",
									"    pm.expect(target[target.length-2].rating).to.equal(0);\r",
									"    pm.expect(target[target.length-1].rating).to.equal(2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/users?asc=false",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"users"
							],
							"query": [
								{
									"key": "asc",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получить неотсортированные события с рейтингом",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Количество событий должно быть 3\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be empty').to.eql(3);\r",
									"});\r",
									"\r",
									"pm.test(\"События должны содержать поле: rating\", function () {\r",
									"    pm.expect(target[target.length-3]).to.have.property('rating');\r",
									"    pm.expect(target[target.length-2]).to.have.property('rating');\r",
									"    pm.expect(target[target.length-1]).to.have.property('rating');\r",
									"});\r",
									"\r",
									"pm.test(\"Рейтинг событий должен учитывать оценки\", function () {\r",
									"    pm.expect(target[target.length-3].rating).to.equal(2);\r",
									"    pm.expect(target[target.length-2].rating).to.equal(-2);\r",
									"    pm.expect(target[target.length-1].rating).to.equal(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/events?categories=1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"events"
							],
							"query": [
								{
									"key": "categories",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получить события с рейтингом по убыванию",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Количество событий должно быть 3\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be empty').to.eql(3);\r",
									"});\r",
									"\r",
									"pm.test(\"События должны содержать поле: rating\", function () {\r",
									"    pm.expect(target[target.length-3]).to.have.property('rating');\r",
									"    pm.expect(target[target.length-2]).to.have.property('rating');\r",
									"    pm.expect(target[target.length-1]).to.have.property('rating');\r",
									"});\r",
									"\r",
									"pm.test(\"Рейтинг событий должен учитывать оценки\", function () {\r",
									"    pm.expect(target[target.length-3].rating).to.equal(2);\r",
									"    pm.expect(target[target.length-2].rating).to.equal(0);\r",
									"    pm.expect(target[target.length-1].rating).to.equal(-2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/events?categories=1&asc=true",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"events"
							],
							"query": [
								{
									"key": "categories",
									"value": "1"
								},
								{
									"key": "asc",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получить события с рейтингом по возрастанию",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Количество событий должно быть 3\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be empty').to.eql(3);\r",
									"});\r",
									"\r",
									"pm.test(\"События должны содержать поле: rating\", function () {\r",
									"    pm.expect(target[target.length-3]).to.have.property('rating');\r",
									"    pm.expect(target[target.length-2]).to.have.property('rating');\r",
									"    pm.expect(target[target.length-1]).to.have.property('rating');\r",
									"});\r",
									"\r",
									"pm.test(\"Рейтинг событий должен учитывать оценки\", function () {\r",
									"    pm.expect(target[target.length-3].rating).to.equal(-2);\r",
									"    pm.expect(target[target.length-2].rating).to.equal(0);\r",
									"    pm.expect(target[target.length-1].rating).to.equal(2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/events?categories=1&asc=false",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"events"
							],
							"query": [
								{
									"key": "categories",
									"value": "1"
								},
								{
									"key": "asc",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Изменить оценку на лайк 2-му событию пользователем id=3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function() {\r",
									"    pm.response.to.be.ok;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Ответ должен содержать поля: userName, eventTitle, evaluation\", function () {\r",
									"    const target = pm.response.json();\r",
									"    pm.expect(target).to.have.property('userName');\r",
									"    pm.expect(target).to.have.property('eventTitle');\r",
									"    pm.expect(target).to.have.property('evaluation');\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'userName' должно иметь значение 'Stranger'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('userName');\r",
									"    pm.expect(jsonData.userName, '\"userName\" must be \"Stranger\"').to.eql('Stranger');\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'eventTitle' должно иметь значение 'Event №2'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('eventTitle');\r",
									"    pm.expect(jsonData.eventTitle, '\"eventTitle\" must be \"Event №2\"').to.eql('Event №2');\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'evaluation' должно иметь значение 'LIKE'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('evaluation');\r",
									"    pm.expect(jsonData.evaluation, '\"evaluation\" must be \"LIKE\"').to.eql('LIKE');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/:userId/events/:eventId/evaluation?isLike=true",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"evaluation"
							],
							"query": [
								{
									"key": "isLike",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "3"
								},
								{
									"key": "eventId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получить пользователей по убыванию рейтинга после изменения оценки",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Количество пользователей должно быть 3\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be empty').to.eql(3);\r",
									"});\r",
									"\r",
									"pm.test(\"Пользователи должны содержать поля: id, name, email, rating\", function () {\r",
									"    pm.expect(target[target.length-3]).to.have.property('id');\r",
									"    pm.expect(target[target.length-3]).to.have.property('name');\r",
									"    pm.expect(target[target.length-3]).to.have.property('email');\r",
									"    pm.expect(target[target.length-3]).to.have.property('rating');\r",
									"\r",
									"    pm.expect(target[target.length-2]).to.have.property('id');\r",
									"    pm.expect(target[target.length-2]).to.have.property('name');\r",
									"    pm.expect(target[target.length-2]).to.have.property('email');\r",
									"    pm.expect(target[target.length-2]).to.have.property('rating');\r",
									"\r",
									"    pm.expect(target[target.length-1]).to.have.property('id');\r",
									"    pm.expect(target[target.length-1]).to.have.property('name');\r",
									"    pm.expect(target[target.length-1]).to.have.property('email');\r",
									"    pm.expect(target[target.length-1]).to.have.property('rating');\r",
									"});\r",
									"\r",
									"pm.test(\"Рейтинг пользователей должен учитывать оценки\", function () {\r",
									"    pm.expect(target[target.length-3].rating).to.equal(2);\r",
									"    pm.expect(target[target.length-2].rating).to.equal(0);\r",
									"    pm.expect(target[target.length-1].rating).to.equal(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/users?asc=true",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"users"
							],
							"query": [
								{
									"key": "asc",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получить события с рейтингом по убыванию после изменения оценки",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Количество событий должно быть 3\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be empty').to.eql(3);\r",
									"});\r",
									"\r",
									"pm.test(\"События должны содержать поле: rating\", function () {\r",
									"    pm.expect(target[target.length-3]).to.have.property('rating');\r",
									"    pm.expect(target[target.length-2]).to.have.property('rating');\r",
									"    pm.expect(target[target.length-1]).to.have.property('rating');\r",
									"});\r",
									"\r",
									"pm.test(\"Рейтинг событий должен учитывать оценки\", function () {\r",
									"    pm.expect(target[target.length-3].rating).to.equal(2);\r",
									"    pm.expect(target[target.length-2].rating).to.equal(0);\r",
									"    pm.expect(target[target.length-1].rating).to.equal(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/events?categories=1&asc=true",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"events"
							],
							"query": [
								{
									"key": "categories",
									"value": "1"
								},
								{
									"key": "asc",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удалить оценку 2-му событию пользователем id=3 Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function() {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/:userId/events/:eventId/evaluation",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"evaluation"
							],
							"variable": [
								{
									"key": "userId",
									"value": "3"
								},
								{
									"key": "eventId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получить пользователей по убыванию рейтинга после удаления оценки",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Количество пользователей должно быть 3\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be empty').to.eql(3);\r",
									"});\r",
									"\r",
									"pm.test(\"Пользователи должны содержать поля: id, name, email, rating\", function () {\r",
									"    pm.expect(target[target.length-3]).to.have.property('id');\r",
									"    pm.expect(target[target.length-3]).to.have.property('name');\r",
									"    pm.expect(target[target.length-3]).to.have.property('email');\r",
									"    pm.expect(target[target.length-3]).to.have.property('rating');\r",
									"\r",
									"    pm.expect(target[target.length-2]).to.have.property('id');\r",
									"    pm.expect(target[target.length-2]).to.have.property('name');\r",
									"    pm.expect(target[target.length-2]).to.have.property('email');\r",
									"    pm.expect(target[target.length-2]).to.have.property('rating');\r",
									"\r",
									"    pm.expect(target[target.length-1]).to.have.property('id');\r",
									"    pm.expect(target[target.length-1]).to.have.property('name');\r",
									"    pm.expect(target[target.length-1]).to.have.property('email');\r",
									"    pm.expect(target[target.length-1]).to.have.property('rating');\r",
									"});\r",
									"\r",
									"pm.test(\"Рейтинг пользователей должен учитывать оценки\", function () {\r",
									"    pm.expect(target[target.length-3].rating).to.equal(2);\r",
									"    pm.expect(target[target.length-2].rating).to.equal(0);\r",
									"    pm.expect(target[target.length-1].rating).to.equal(-1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/users?asc=true",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"users"
							],
							"query": [
								{
									"key": "asc",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получить событий с рейтингом по убыванию после удаления оценки",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Количество событий должно быть 3\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be empty').to.eql(3);\r",
									"});\r",
									"\r",
									"pm.test(\"События должны содержать поле: rating\", function () {\r",
									"    pm.expect(target[target.length-3]).to.have.property('rating');\r",
									"    pm.expect(target[target.length-2]).to.have.property('rating');\r",
									"    pm.expect(target[target.length-1]).to.have.property('rating');\r",
									"});\r",
									"\r",
									"pm.test(\"Рейтинг событий должен учитывать оценки\", function () {\r",
									"    pm.expect(target[target.length-3].rating).to.equal(2);\r",
									"    pm.expect(target[target.length-2].rating).to.equal(0);\r",
									"    pm.expect(target[target.length-1].rating).to.equal(-1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/events?categories=1&asc=true",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"events"
							],
							"query": [
								{
									"key": "categories",
									"value": "1"
								},
								{
									"key": "asc",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Попытаться изменить удаленную оценку",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.be.notFound;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/:userId/events/:eventId/evaluation?isLike=true",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"evaluation"
							],
							"query": [
								{
									"key": "isLike",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "3"
								},
								{
									"key": "eventId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получить 1-е событие с рейтингом 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Событие должно содержать поле: rating\", function () {\r",
									"    const target = pm.response.json();\r",
									"    pm.expect(target).to.have.property('rating');\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'rating' должно иметь значение 2\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('rating');\r",
									"    pm.expect(jsonData.rating, '\"rating\" must be 2').to.eql(2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/:userId/events/:eventId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"events",
								":eventId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								},
								{
									"key": "eventId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получить 2-е событие с рейтингом -1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Событие должно содержать поле: rating\", function () {\r",
									"    const target = pm.response.json();\r",
									"    pm.expect(target).to.have.property('rating');\r",
									"});\r",
									"\r",
									"pm.test(\"Поле 'rating' должно иметь значение -1\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('rating');\r",
									"    pm.expect(jsonData.rating, '\"rating\" must be -1').to.eql(-1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/:userId/events/:eventId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"events",
								":eventId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "2"
								},
								{
									"key": "eventId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}